@model ReviewQuote

@{
}

<!DOCTYPE html> 

<html> 



<body>

	 <SECTION style="border-style: solid; border-width: 3px; width: 400px;">
		<CANVAS HEIGHT="400" WIDTH="400px" ID="canvas"> 
			Your browser is not supporting HTML5 Canvas .Upgrade Browser to view this program or check with Chrome or in Firefox.
		</CANVAS>
	</SECTION> 
	<script>
		var canvas = document.getElementById('canvas');
//Always check for properties and methods, to make sure your code doesn't break in other browsers.
if (canvas.getContext) 
 {

 
 //global variables for canvas
  var thicc = 25;
  var scalar = 1;
  x_shift = 0;
  y_shift = 0;
  f_size = "12px Arial";
  var angle_shift = -9;


  //variables for quote
  var num_shapes = 1;
  var num_legs = 6;

  //variables for shape
  var curr_unit_val = 0;
  var neg_pos = 1;
  var curr_x = 0;
  var curr_y = 0;
  var prev_x = 0;
  var prev_y = 0;

  var x0;
  var y0;

  //Variables for Shape creation
  var leg1_length = 25;
  var leg1_degree = 135;
  var leg1_direction = "left";
  var x1;
  var y1;

  var leg2_length = 50;
  var leg2_degree = 90;
  var leg2_direction = "left";
  var x2;
  var y2;

  var leg3_length = 30;
  var leg3_degree = 60;
  var leg3_direction = "left";
  var x3;
  var y3;

  var leg4_length = 15;
  var leg4_degree = 90;
  var leg4_direction = "right";
  var x4;
  var y4;

  var leg5_length = 25;
  var leg5_degree = 90;
  var leg5_direction = "right";
  var x5;
  var y5;

  var leg6_length = 30;


  for (var i = 0 ; i < num_shapes ; i++) //for 1 shape
  {
	var context = canvas.getContext('2d');

	curr_x = (canvas.width)/2; //sets inital x point
	curr_y = (canvas.height)/2; //sets initial y point
	curr_unit_val = 0;  //set unit circle value
	for(var j = 0 ; j < num_legs ; j++)
	{
		if ( j == 0)
		{

			x0 = curr_x + x_shift;  //save the new x coord
			y0 = curr_y + y_shift;  //save the new y coord

			//draw first line of shape
			context.beginPath(); 

			//(x0,y0)
			context.moveTo(x0, y0);




			console.log("starting line 1 from x value:")
			console.log(x0);
			console.log("starting line 1 from y value:")
			console.log(y0);


			//prev_x = curr_x;			//store the previous x coord
			//prev_y = curr_y;			//store the previous y coord
			x1 = x0 + leg1_length * scalar;		//save the new x coord
			y1 = y0;					//save the new y coord


			//(x1,y1)
			context.lineTo(x1, y1);

			context.stroke(); //draw the actual line


			//now draw text on top of the line itself

			
		}
		else if (j == 1)
		{
			if(leg1_direction == "right")
			{
				neg_pos = 1;
			}
			else
			{
				neg_pos = -1;
			}

			context.beginPath(); 
			context.moveTo(x1, y1);


			//(x2,y2) 
			x2 = (x1 + scalar * Math.cos( ((Math.PI)/180) * (curr_unit_val + (neg_pos)*(180) - (neg_pos)*(leg1_degree) ) )*leg2_length );
			y2 = (y1 + scalar * Math.sin( ((Math.PI)/180) * (curr_unit_val + (neg_pos)*(180) - (neg_pos)*(leg1_degree) ) )*leg2_length );

			context.lineTo(x2, y2);

			curr_unit_val = curr_unit_val + (neg_pos)*(180) - (neg_pos)*(leg1_degree);
			//prev_x = curr_x;
			//prev_y = curr_y;


			context.stroke(); //draw the actual line

			//draw dimensions on top of line
		}
		else if (j == 2)
		{
			if(leg2_direction == "right")
			{
				neg_pos = 1;
			}
			else
			{
				neg_pos = -1;
			}

			context.beginPath(); 
			context.moveTo(x2, y2);


			//(x3,y3)
			x3 = (x2 + scalar * Math.cos( ((Math.PI)/180) * (curr_unit_val + (neg_pos)*(180) - (neg_pos)*(leg2_degree) ) )*leg3_length );
			y3 = (y2 + scalar * Math.sin( ((Math.PI)/180) * (curr_unit_val + (neg_pos)*(180) - (neg_pos)*(leg2_degree) ) )*leg3_length );

			context.lineTo(x3, y3);

			curr_unit_val = curr_unit_val + (neg_pos)*(180) - (neg_pos)*(leg2_degree);
			//prev_x = curr_x;
			//prev_y = curr_y;



			context.stroke(); //draw the actual line

			//draw dimensions on top of line
		}
		else if (j == 3)
		{
			if(leg3_direction == "right")
			{
				neg_pos = 1;
			}
			else
			{
				neg_pos = -1;
			}

			context.beginPath(); 
			context.moveTo(x3, y3);

			//(x4,y4)
			x4 = (x3 + scalar * Math.cos( ((Math.PI)/180) * (curr_unit_val + (neg_pos)*(180) - (neg_pos)*(leg3_degree) ) )*leg4_length );
			y4 = (y3 + scalar * Math.sin( ((Math.PI)/180) * (curr_unit_val + (neg_pos)*(180) - (neg_pos)*(leg3_degree) ) )*leg4_length );


			context.lineTo(x4, y4);

			curr_unit_val = curr_unit_val + (neg_pos)*(180) - (neg_pos)*(leg3_degree);
			//prev_x = curr_x;
			//prev_y = curr_y;

			context.stroke(); //draw the actual line

			//draw dimensions on top of line
		}
		else if (j == 4)
		{
			if(leg4_direction == "right")
			{
				neg_pos = 1;
			}
			else
			{
				neg_pos = -1;
			}

			context.beginPath(); 
			context.moveTo(x4, y4);

			//(x5,y5)
			x5 = (x4 + scalar * Math.cos( ((Math.PI)/180) * (curr_unit_val + (neg_pos)*(180) - (neg_pos)*(leg4_degree) ) )*leg5_length );
			y5 = (y4 + scalar * Math.sin( ((Math.PI)/180) * (curr_unit_val + (neg_pos)*(180) - (neg_pos)*(leg4_degree) ) )*leg5_length );

			context.lineTo(x5, y5);

			curr_unit_val = curr_unit_val + (neg_pos)*(180) - (neg_pos)*(leg4_degree);
			//prev_x = curr_x;
			//prev_y = curr_y;


			context.stroke(); //draw the actual line

			//draw dimensions on top of line
		}
		else if (j == 5)
		{
			if(leg5_direction == "right")
			{
				neg_pos = 1;
			}
			else
			{
				neg_pos = -1;
			}

			context.beginPath(); 
			context.moveTo(x5, y5);

			//(x6,y6)
			x6 = (x5 + scalar * Math.cos( ((Math.PI)/180) * (curr_unit_val + (neg_pos)*(180) - (neg_pos)*(leg5_degree) ) )*leg6_length );
			y6 = (y5 + scalar * Math.sin( ((Math.PI)/180) * (curr_unit_val + (neg_pos)*(180) - (neg_pos)*(leg5_degree) ) )*leg6_length );

			context.lineTo( x6, y6 );

			curr_unit_val = curr_unit_val + (neg_pos)*(180) - (neg_pos)*(leg5_degree);


			//prev_x = curr_x;
			//prev_y = curr_y;
			//curr_x = (curr_x + Math.cos( ((Math.PI)/180) * (curr_unit_val + (neg_pos)*(180) - (neg_pos)*(leg5_degree) ) )*leg6_length );
			//curr_y = (curr_y + Math.sin( ((Math.PI)/180) * (curr_unit_val + (neg_pos)*(180) - (neg_pos)*(leg5_degree) ) )*leg6_length );

			context.stroke(); //draw the actual line

			//draw dimensions on top of line
		}


	}
  }


  /*
  // How to put degrees symbol: copy and paste °
  //can use canvas.width/2 and canvas.height/2 to figure out placements for shapes

  var context = canvas.getContext('2d');

  //context.font = f_size;
  //context.fillStyle = "red";

  // Reset the current path
  context.beginPath(); 

  // Starting point 0
   context.moveTo(0 * scalar + x_shift,40 * scalar + y_shift);

  // Line 1 End point
  context.lineTo(15 * scalar + x_shift,40 * scalar + y_shift);

 // context.fillText('15"', ( (15 * scalar + x_shift) + (0 * scalar + x_shift) )/2, 20 + ( (40 * scalar + y_shift) + (40 * scalar + y_shift) )/2 );


  // Line 2 End point
  context.lineTo(4.39 * scalar + x_shift,29.39 * scalar + y_shift);

 // context.fillText('45°', 5 + ( (15 * scalar + x_shift) + (0 * scalar + x_shift) )/2, -10 + ( (40 * scalar + y_shift) + (40 * scalar + y_shift) )/2 );
  //context.fillText('15"', 1 + ( (15 * scalar + x_shift) + (4.39 * scalar + x_shift) )/2, -6 + ( (29.39 * scalar + y_shift) + (40 * scalar + y_shift) )/2 );


  // Line 3 End point
  context.lineTo(14.9999 * scalar + x_shift,18.7867 * scalar + y_shift);

 // context.fillText('90°', 15 + 4.39 * scalar + x_shift, 3 + 29.39 * scalar + y_shift );
//  context.fillText('15"', -20 + ( (4.39 * scalar + x_shift) + (14.9999 * scalar + x_shift) )/2, -5 + ( (18.7867 * scalar + y_shift) + (29.39 * scalar + y_shift) )/2 );


  // Line 4 End point
  context.lineTo(14.9999 * scalar + x_shift, 33.78 * scalar + y_shift);
  
 // context.fillText('45°', -25 + 14.9999 * scalar + x_shift, 40 + 18.7867 * scalar + y_shift );
 // context.fillText('15"', 5 + ( (14.9999 * scalar + x_shift) + (14.9999 * scalar + x_shift) )/2, ( (33.78 * scalar + y_shift) + (18.7867 * scalar + y_shift) )/2 );


  // Make the line visible

  context.lineJoin = "round";
  context.lineWidth = thicc;
  context.stroke();

  context.font = f_size;
  context.fillStyle = "white";

  context.beginPath(); 

  context.fillText('1', ( (15 * scalar + x_shift) + (0 * scalar + x_shift) )/2, ( 6 + (40 * scalar + y_shift) + (40 * scalar + y_shift) )/2 );

  context.fillText('45°', (angle_shift + 15 * scalar + x_shift), (40 * scalar + y_shift) );
  context.fillText('2', (-6 + (15 * scalar + x_shift) + (4.39 * scalar + x_shift) )/2, ( (29.39 * scalar + y_shift) + (40 * scalar + y_shift) )/2 );

  
  context.fillText('90°', 4.39 * scalar + x_shift, 29.39 * scalar + y_shift );
  context.fillText('3', ( (4.39 * scalar + x_shift) + (14.9999 * scalar + x_shift) )/2, ( (18.7867 * scalar + y_shift) + (29.39 * scalar + y_shift) )/2 );

  context.fillText('45°', (angle_shift + 14.9999 * scalar + x_shift), (18.7867 * scalar + y_shift) );
  context.fillText('4', ( -6 + (14.9999 * scalar + x_shift) + (14.9999 * scalar + x_shift) )/2, ( (33.78 * scalar + y_shift) + (18.7867 * scalar + y_shift) )/2 );

  context.stroke();

 

   */
   }

	</script>



<Script>

//public Canvas object to use in all the functions.  
//Main canvas declaration   
    var canvas;  
    var ctx;  
    var x = 75;  
    var y = 50;  
    //Width and Height of the canvas  
    var WIDTH = 1024;  
    var HEIGHT = 740;  
    //    var dragok = false;  
//Global color variable which will be used to store the selected color name.  
    var Colors="";  
    var newPaint = false;  
    var DrawingTypes = "";  
    //Circle default radius size  
    var radius = 30;  
    var radius_New = 30;  
    // Rectangle array  
    rect = {},  
    //drag= false default to test for the dragging  
drag = false;  
// Array to store all the old Shapes drawing details  
    var rectStartXArray = new Array();  
    var rectStartYArray = new Array();  
    var rectWArray = new Array();  
    var rectHArray = new Array();  
    var rectColor = new Array();  
    var DrawType_ARR = new Array();  
    var radius_ARR = new Array();  
    var Text_ARR = new Array();  
    // Declared for the Free hand pencil Drawing.  
    var prevX = 0,  
    currX = 0,  
    prevY = 0,  
    currY = 0;  
    //to add the Image  
    var imageObj = new Image();  
//Initialize the Canvas and Mouse events for Canvas  
    function init(DrawType) {  
        newPaint = true;  
        canvas = document.getElementById("canvas");  
        x = 5;  
        y = 5;  
        DrawingTypes = DrawType;  
        ctx = canvas.getContext("2d");  
        radius = 30;  
        radius_New = radius;  
        canvas.addEventListener('mousedown', mouseDown, false);  
        canvas.addEventListener('mouseup', mouseUp, false);  
        canvas.addEventListener('mousemove', mouseMove, false);  
        imageObj.src = 'images/Afraz.jpg';  
  
        return setInterval(draw, 10);  
    } 
	

 //Mouse down event method  
    function mouseDown(e) {  
        rect.startX = e.pageX - this.offsetLeft;  
        rect.startY = e.pageY - this.offsetTop;  
        radius_New = radius;  
        prevX = e.clientX - canvas.offsetLeft;  
        prevY = e.clientY - canvas.offsetTop;  
        currX = e.clientX - canvas.offsetLeft;  
        currY = e.clientY - canvas.offsetTop;  
        drag = true;  
    }  
    //Mouse UP event Method  
    function mouseUp() {  
        rectStartXArray[rectStartXArray.length] = rect.startX;  
        rectStartYArray[rectStartYArray.length] = rect.startY;  
        rectWArray[rectWArray.length] = rect.w;  
        rectHArray[rectHArray.length] = rect.h;  
        Colors = document.getElementById("SelectColor").value;  
        rectColor[rectColor.length] = "#" + Colors;  
        DrawType_ARR[DrawType_ARR.length] = DrawingTypes  
        radius_ARR[radius_ARR.length] = radius_New;  
        Text_ARR[Text_ARR.length] = $('#txtInput').val();  
        drag = false;  
         
    }  
  
    //mouse Move Event method  
    function mouseMove(e) {  
        if (drag) {  
            rect.w = (e.pageX - this.offsetLeft) - rect.startX;  
              
             rect.h = (e.pageY - this.offsetTop) - rect.startY;  
             drawx = e.pageX - this.offsetLeft;  
             drawy = e.pageY - this.offsetTop;  
             prevX = currX;  
             prevY = currY;  
             currX = e.clientX - canvas.offsetLeft;  
             currY = e.clientY - canvas.offsetTop;  
            if (drag = true) {  
                radius_New += 2;  
                 
            }  
            draw();  
            if (DrawingTypes == "FreeDraw" || DrawingTypes == "Erase") {  
            }  
            else {  
                ctx.clearRect(0, 0, canvas.width, canvas.height);  
            }  
             
        }  
        drawOldShapes();  
    } 

	//Draw all Shapes,Text and add images   
    function draw() {  
        ctx.beginPath();  
        Colors = document.getElementById("SelectColor").value;  
        ctx.fillStyle = "#" + Colors;  
        switch (DrawingTypes) {  
            case "FillRect":  
                ctx.rect(rect.startX, rect.startY, rect.w, rect.h);  
                break;  
            case "FillCircle":  
                ctx.arc(rect.startX, rect.startY, radius_New, rect.w, rect.h);  
                break;  
            case "Images":  
                ctx.drawImage(imageObj, rect.startX, rect.startY, rect.w, rect.h);  
                break;  
            case "DrawText":  
                ctx.font = '40pt Calibri';  
                  
                ctx.fillText($('#txtInput').val(), rect.startX, rect.startY);  
                break;  
            case "FreeDraw":  
                ctx.beginPath();  
                ctx.moveTo(prevX, prevY);  
                ctx.lineTo(currX, currY);  
                ctx.strokeStyle = "#" + Colors;  
                ctx.lineWidth = $('#selSize').val();  
                ctx.stroke();  
                ctx.closePath();  
//                ctx.beginPath();  
//                ctx.moveTo(drawx, drawy);  
//                ctx.rect(drawx, drawy,  6, 6);  
//                ctx.fill();  
                break;  
            case "Erase":  
                
                ctx.beginPath();  
                ctx.moveTo(prevX, prevY);  
                ctx.lineTo(currX, currY); 
                ctx.strokeStyle = "#FFFFFF";  
                ctx.lineWidth = 6;  
                ctx.stroke();  
                ctx.closePath();  
                //                ctx.beginPath();  
                //                ctx.moveTo(drawx, drawy);  
                //                ctx.rect(drawx, drawy,  6, 6);  
                //                ctx.fill();  
                break;  
        }  
          
        ctx.fill();  
       // ctx.stroke();  
    } 

	//Save as Image file   
    function ShanuSaveImage() {   
          var m = confirm("Are you sure to Save ");   
          if (m) {   
              // generate the image data   
              var image_NEW = document.getElementById("canvas").toDataURL("image/png");   
              image_NEW = image_NEW.replace('data:image/png;base64,', '');  
              $.ajax({  
                  type: 'POST',  
                  url: 'Default.aspx/SaveImage',  
                  data: '{ "imageData" : "' + image_NEW + '" }',  
                  contentType: 'application/json; charset=utf-8',  
                  dataType: 'json',  
                  success: function (msg) {  
                      alert('Image saved to your root Folder !');  
                  }  
              });  
          }        
    } 


	//Save as Image file   
    function ShanuSaveImage() {   
          var m = confirm("Are you sure to Save ");   
          if (m) {   
              // generate the image data   
              var image_NEW = document.getElementById("canvas").toDataURL("image/png");   
              image_NEW = image_NEW.replace('data:image/png;base64,', '');  
              $.ajax({  
                  type: 'POST',  
                  url: 'Default.aspx/SaveImage',  
                  data: '{ "imageData" : "' + image_NEW + '" }',  
                  contentType: 'application/json; charset=utf-8',  
                  dataType: 'json',  
                  success: function (msg) {  
                      alert('Image saved to your root Folder !');  
                  }  
              });  
          }        
    }
	</script>




</body>



</html>